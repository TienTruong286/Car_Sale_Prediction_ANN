# -*- coding: utf-8 -*-
"""Car Sale Prediction Using ANN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LAGxCs9bLsCxjA8-WSNK3c9XHhzayIp9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("Car_Purchasing_Data.csv", encoding = "ISO-8859-1")

data.head()

X = data.drop(["Customer Name", "Customer e-mail", "Country","Car Purchase Amount"], axis = 1).values
y = data["Car Purchase Amount"].values

from sklearn.model_selection import train_test_split
X_train, X_test,y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state = 42)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
y_train = y_train.reshape(-1,1)
y_train_scaled = scaler.fit_transform(y_train)
y_test = y_test.reshape(-1,1)
y_test_scaled = scaler.transform(y_test)

import tensorflow.keras
from keras.models import Sequential
from keras.layers import Dense, Dropout

model = Sequential()
model.add(Dense(25, activation = 'relu'))
model.add(Dense(35, activation = 'relu'))
model.add(Dense(1, activation = 'linear'))

model.compile(optimizer = "adam", loss = "mean_squared_error")

hist = model.fit(X_train_scaled, y_train_scaled, epochs = 50, batch_size = 64, validation_data= [X_test_scaled, y_test_scaled])

y_pred = model.predict(X_test_scaled)
y_pred_inverse = scaler.inverse_transform(y_pred)

y_pred_inverse

y_test

plt.plot(hist.history["loss"])
plt.plot(hist.history["val_loss"])
plt.ylabel("Training and Validation Loss")
plt.xlabel("Epochs Number")

my_data = np.array([[1, 23, 6000, 1000, 3000]])

predictions = model.predict(my_data)
print(predictions)

predictions_train = model.predict(X_train_scaled)
predictions_inverse = scaler.inverse_transform(predictions_train)

predictions_test = model.predict(X_test_scaled)
predictions_inverse1 = scaler.inverse_transform(predictions_test)

combined_column = np.concatenate((predictions_inverse, predictions_inverse1)).reshape(-1, 1)
combine_df = pd.DataFrame(combined_column, columns=['Combined Column'])
data["Predictions"] = combine_df

data.head()

# Assuming df is your DataFrame with the columns 'Car Purchase Amount' and 'Predictions'
car_purchase_amount = data['Car Purchase Amount']
predictions = data['Predictions']

plt.plot(car_purchase_amount, label='Car Purchase Amount')
plt.plot(predictions, label='Predictions')
plt.xlabel('Customer')
plt.ylabel('Amount')
plt.title('Car Purchase Amount vs. Predictions')
plt.legend()
plt.show()

